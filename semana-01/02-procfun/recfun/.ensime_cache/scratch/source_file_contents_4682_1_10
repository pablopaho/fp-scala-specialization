package recfun

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
    def pascal(c: Int, r: Int): Int = {
      if (c == 0 || c == r)
        1
      else
        pascal(c-1, r-1) + pascal(c, r-1)
    }
  
  /**
   * Exercise 2
   */
    def balance(chars: List[Char]): Boolean = {
      def balanceR(c: List[Char], bal: List[Char]): Boolean = {
        if (c.isEmpty && bal.isEmpty){
          true
        } else {
          val caracter = c.head
          if (caracter == '('){
            balanceR(c.tail, bal :+ caracter)
          }else {
            if (caracter == ')'){
              if (bal.size > 0)
                balanceR(c.tail, bal.dropRight(1))
              else
                false
            }else{
              balanceR(c.tail, bal)
            }
          }
        }
      }
      balanceR(chars, List())
    }
  
  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = {
    if(money == 0)
      1
else if(money > 0 && !coins.isEmpty){
      println(s"money - coins.head : ${money - coins.head} : couin:$coins .. + .. money:$money : coins.tail:${coins.tail} : coins.head:${coins.he}")
      countChange(money - coins.head, coins) + countChange(money, coins.tail)
    }else
      0
  }
}  
